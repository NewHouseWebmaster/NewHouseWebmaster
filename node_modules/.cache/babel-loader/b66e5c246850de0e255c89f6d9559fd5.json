{"ast":null,"code":"/**\n * Utility functions to make API requests.\n * By importing this file, you can use the provided get and post functions.\n * You shouldn't need to modify this file, but if you want to learn more\n * about how these functions work, google search \"Fetch API\"\n *\n * These functions return promises, which means you should use \".then\" on them.\n * e.g. get('/api/foo', { bar: 0 }).then(res => console.log(res))\n */ // ex: formatParams({ some_key: \"some_value\", a: \"b\"}) => \"some_key=some_value&a=b\"\nfunction formatParams(params){// iterate of all the keys of params as an array,\n// map it to a new array of URL string encoded key,value pairs\n// join all the url params using an ampersand (&).\nreturn Object.keys(params).map(function(key){return key+\"=\"+encodeURIComponent(params[key]);}).join(\"&\");}// convert a fetch result to a JSON object with error handling for fetch and json errors\nfunction convertToJSON(res){if(!res.ok){throw\"API request failed with response status \".concat(res.status,\" and text: \").concat(res.statusText);}return res.clone()// clone so that the original is still readable for debugging\n.json()// start converting to JSON object\n.catch(function(error){// throw an error containing the text that couldn't be converted to JSON\nreturn res.text().then(function(text){throw\"API request's result could not be converted to a JSON object: \\n\".concat(text);});});}// Helper code to make a get request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\nexport function get(endpoint){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var fullPath=endpoint+\"?\"+formatParams(params);return fetch(fullPath).then(convertToJSON).catch(function(error){// give a useful error message\nthrow\"GET request to \".concat(fullPath,\" failed with error:\\n\").concat(error);});}// Helper code to make a post request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\nexport function post(endpoint){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return fetch(endpoint,{method:\"post\",headers:{\"Content-type\":\"application/json\"},body:JSON.stringify(params)}).then(convertToJSON)// convert result to JSON object\n.catch(function(error){// give a useful error message\nthrow\"POST request to \".concat(endpoint,\" failed with error:\\n\").concat(error);});}","map":{"version":3,"sources":["/Users/fuzzyelephant/Documents/Code/newhousewebmaster.github.io/src/utilities.js"],"names":["formatParams","params","Object","keys","map","key","encodeURIComponent","join","convertToJSON","res","ok","status","statusText","clone","json","catch","error","text","then","get","endpoint","fullPath","fetch","post","method","headers","body","JSON","stringify"],"mappings":"AAAA;;;;;;;;IAUA;AACA,QAASA,CAAAA,YAAT,CAAsBC,MAAtB,CAA8B,CAC5B;AACA;AACA;AACA,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EACJG,GADI,CACA,SAACC,GAAD,QAASA,CAAAA,GAAG,CAAG,GAAN,CAAYC,kBAAkB,CAACL,MAAM,CAACI,GAAD,CAAP,CAAvC,EADA,EAEJE,IAFI,CAEC,GAFD,CAAP,CAGD,CAED;AACA,QAASC,CAAAA,aAAT,CAAuBC,GAAvB,CAA4B,CAC1B,GAAI,CAACA,GAAG,CAACC,EAAT,CAAa,CACX,uDAAiDD,GAAG,CAACE,MAArD,uBAAyEF,GAAG,CAACG,UAA7E,EACD,CAED,MAAOH,CAAAA,GAAG,CACPI,KADI,EACI;AADJ,CAEJC,IAFI,EAEG;AAFH,CAGJC,KAHI,CAGE,SAACC,KAAD,CAAW,CAChB;AACA,MAAOP,CAAAA,GAAG,CAACQ,IAAJ,GAAWC,IAAX,CAAgB,SAACD,IAAD,CAAU,CAC/B,+EAAyEA,IAAzE,EACD,CAFM,CAAP,CAGD,CARI,CAAP,CASD,CAED;AACA;AACA,MAAO,SAASE,CAAAA,GAAT,CAAaC,QAAb,CAAoC,IAAbnB,CAAAA,MAAa,2DAAJ,EAAI,CACzC,GAAMoB,CAAAA,QAAQ,CAAGD,QAAQ,CAAG,GAAX,CAAiBpB,YAAY,CAACC,MAAD,CAA9C,CACA,MAAOqB,CAAAA,KAAK,CAACD,QAAD,CAAL,CACJH,IADI,CACCV,aADD,EAEJO,KAFI,CAEE,SAACC,KAAD,CAAW,CAChB;AACA,8BAAwBK,QAAxB,iCAAwDL,KAAxD,EACD,CALI,CAAP,CAMD,CAED;AACA;AACA,MAAO,SAASO,CAAAA,IAAT,CAAcH,QAAd,CAAqC,IAAbnB,CAAAA,MAAa,2DAAJ,EAAI,CAC1C,MAAOqB,CAAAA,KAAK,CAACF,QAAD,CAAW,CACrBI,MAAM,CAAE,MADa,CAErBC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFY,CAGrBC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe3B,MAAf,CAHe,CAAX,CAAL,CAKJiB,IALI,CAKCV,aALD,CAKgB;AALhB,CAMJO,KANI,CAME,SAACC,KAAD,CAAW,CAChB;AACA,+BAAyBI,QAAzB,iCAAyDJ,KAAzD,EACD,CATI,CAAP,CAUD","sourcesContent":["/**\n * Utility functions to make API requests.\n * By importing this file, you can use the provided get and post functions.\n * You shouldn't need to modify this file, but if you want to learn more\n * about how these functions work, google search \"Fetch API\"\n *\n * These functions return promises, which means you should use \".then\" on them.\n * e.g. get('/api/foo', { bar: 0 }).then(res => console.log(res))\n */\n\n// ex: formatParams({ some_key: \"some_value\", a: \"b\"}) => \"some_key=some_value&a=b\"\nfunction formatParams(params) {\n  // iterate of all the keys of params as an array,\n  // map it to a new array of URL string encoded key,value pairs\n  // join all the url params using an ampersand (&).\n  return Object.keys(params)\n    .map((key) => key + \"=\" + encodeURIComponent(params[key]))\n    .join(\"&\");\n}\n\n// convert a fetch result to a JSON object with error handling for fetch and json errors\nfunction convertToJSON(res) {\n  if (!res.ok) {\n    throw `API request failed with response status ${res.status} and text: ${res.statusText}`;\n  }\n\n  return res\n    .clone() // clone so that the original is still readable for debugging\n    .json() // start converting to JSON object\n    .catch((error) => {\n      // throw an error containing the text that couldn't be converted to JSON\n      return res.text().then((text) => {\n        throw `API request's result could not be converted to a JSON object: \\n${text}`;\n      });\n    });\n}\n\n// Helper code to make a get request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\nexport function get(endpoint, params = {}) {\n  const fullPath = endpoint + \"?\" + formatParams(params);\n  return fetch(fullPath)\n    .then(convertToJSON)\n    .catch((error) => {\n      // give a useful error message\n      throw `GET request to ${fullPath} failed with error:\\n${error}`;\n    });\n}\n\n// Helper code to make a post request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\nexport function post(endpoint, params = {}) {\n  return fetch(endpoint, {\n    method: \"post\",\n    headers: { \"Content-type\": \"application/json\" },\n    body: JSON.stringify(params),\n  })\n    .then(convertToJSON) // convert result to JSON object\n    .catch((error) => {\n      // give a useful error message\n      throw `POST request to ${endpoint} failed with error:\\n${error}`;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}