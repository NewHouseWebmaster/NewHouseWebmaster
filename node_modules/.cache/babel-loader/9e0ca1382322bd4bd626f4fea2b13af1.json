{"ast":null,"code":"/**\n * Utility functions to make API requests.\n * By importing this file, you can use the provided get and post functions.\n * You shouldn't need to modify this file, but if you want to learn more\n * about how these functions work, google search \"Fetch API\"\n *\n * These functions return promises, which means you should use \".then\" on them.\n * e.g. get('/api/foo', { bar: 0 }).then(res => console.log(res))\n */\n// ex: formatParams({ some_key: \"some_value\", a: \"b\"}) => \"some_key=some_value&a=b\"\nfunction formatParams(params) {\n  // iterate of all the keys of params as an array,\n  // map it to a new array of URL string encoded key,value pairs\n  // join all the url params using an ampersand (&).\n  return Object.keys(params).map(key => key + \"=\" + encodeURIComponent(params[key])).join(\"&\");\n} // convert a fetch result to a JSON object with error handling for fetch and json errors\n\n\nfunction convertToJSON(res) {\n  if (!res.ok) {\n    throw `API request failed with response status ${res.status} and text: ${res.statusText}`;\n  }\n\n  return res.clone() // clone so that the original is still readable for debugging\n  .json() // start converting to JSON object\n  .catch(error => {\n    // throw an error containing the text that couldn't be converted to JSON\n    return res.text().then(text => {\n      throw `API request's result could not be converted to a JSON object: \\n${text}`;\n    });\n  });\n} // Helper code to make a get request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\n\n\nexport function get(endpoint, params = {}) {\n  const fullPath = endpoint + \"?\" + formatParams(params);\n  return fetch(fullPath).then(convertToJSON).catch(error => {\n    // give a useful error message\n    throw `GET request to ${fullPath} failed with error:\\n${error}`;\n  });\n} // Helper code to make a post request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\n\nexport function post(endpoint, params = {}) {\n  return fetch(endpoint, {\n    method: \"post\",\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify(params)\n  }).then(convertToJSON) // convert result to JSON object\n  .catch(error => {\n    // give a useful error message\n    throw `POST request to ${endpoint} failed with error:\\n${error}`;\n  });\n}","map":{"version":3,"sources":["/Users/fuzzyelephant/Documents/Code/newhousewebmaster.github.io/src/utilities.js"],"names":["formatParams","params","Object","keys","map","key","encodeURIComponent","join","convertToJSON","res","ok","status","statusText","clone","json","catch","error","text","then","get","endpoint","fullPath","fetch","post","method","headers","body","JSON","stringify"],"mappings":"AAAA;;;;;;;;;AAUA;AACA,SAASA,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B;AACA;AACA;AACA,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EACJG,GADI,CACCC,GAAD,IAASA,GAAG,GAAG,GAAN,GAAYC,kBAAkB,CAACL,MAAM,CAACI,GAAD,CAAP,CADvC,EAEJE,IAFI,CAEC,GAFD,CAAP;AAGD,C,CAED;;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,UAAO,2CAA0CD,GAAG,CAACE,MAAO,cAAaF,GAAG,CAACG,UAAW,EAAxF;AACD;;AAED,SAAOH,GAAG,CACPI,KADI,GACI;AADJ,GAEJC,IAFI,GAEG;AAFH,GAGJC,KAHI,CAGGC,KAAD,IAAW;AAChB;AACA,WAAOP,GAAG,CAACQ,IAAJ,GAAWC,IAAX,CAAiBD,IAAD,IAAU;AAC/B,YAAO,mEAAkEA,IAAK,EAA9E;AACD,KAFM,CAAP;AAGD,GARI,CAAP;AASD,C,CAED;AACA;;;AACA,OAAO,SAASE,GAAT,CAAaC,QAAb,EAAuBnB,MAAM,GAAG,EAAhC,EAAoC;AACzC,QAAMoB,QAAQ,GAAGD,QAAQ,GAAG,GAAX,GAAiBpB,YAAY,CAACC,MAAD,CAA9C;AACA,SAAOqB,KAAK,CAACD,QAAD,CAAL,CACJH,IADI,CACCV,aADD,EAEJO,KAFI,CAEGC,KAAD,IAAW;AAChB;AACA,UAAO,kBAAiBK,QAAS,wBAAuBL,KAAM,EAA9D;AACD,GALI,CAAP;AAMD,C,CAED;AACA;;AACA,OAAO,SAASO,IAAT,CAAcH,QAAd,EAAwBnB,MAAM,GAAG,EAAjC,EAAqC;AAC1C,SAAOqB,KAAK,CAACF,QAAD,EAAW;AACrBI,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe3B,MAAf;AAHe,GAAX,CAAL,CAKJiB,IALI,CAKCV,aALD,EAKgB;AALhB,GAMJO,KANI,CAMGC,KAAD,IAAW;AAChB;AACA,UAAO,mBAAkBI,QAAS,wBAAuBJ,KAAM,EAA/D;AACD,GATI,CAAP;AAUD","sourcesContent":["/**\n * Utility functions to make API requests.\n * By importing this file, you can use the provided get and post functions.\n * You shouldn't need to modify this file, but if you want to learn more\n * about how these functions work, google search \"Fetch API\"\n *\n * These functions return promises, which means you should use \".then\" on them.\n * e.g. get('/api/foo', { bar: 0 }).then(res => console.log(res))\n */\n\n// ex: formatParams({ some_key: \"some_value\", a: \"b\"}) => \"some_key=some_value&a=b\"\nfunction formatParams(params) {\n  // iterate of all the keys of params as an array,\n  // map it to a new array of URL string encoded key,value pairs\n  // join all the url params using an ampersand (&).\n  return Object.keys(params)\n    .map((key) => key + \"=\" + encodeURIComponent(params[key]))\n    .join(\"&\");\n}\n\n// convert a fetch result to a JSON object with error handling for fetch and json errors\nfunction convertToJSON(res) {\n  if (!res.ok) {\n    throw `API request failed with response status ${res.status} and text: ${res.statusText}`;\n  }\n\n  return res\n    .clone() // clone so that the original is still readable for debugging\n    .json() // start converting to JSON object\n    .catch((error) => {\n      // throw an error containing the text that couldn't be converted to JSON\n      return res.text().then((text) => {\n        throw `API request's result could not be converted to a JSON object: \\n${text}`;\n      });\n    });\n}\n\n// Helper code to make a get request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\nexport function get(endpoint, params = {}) {\n  const fullPath = endpoint + \"?\" + formatParams(params);\n  return fetch(fullPath)\n    .then(convertToJSON)\n    .catch((error) => {\n      // give a useful error message\n      throw `GET request to ${fullPath} failed with error:\\n${error}`;\n    });\n}\n\n// Helper code to make a post request. Default parameter of empty JSON Object for params.\n// Returns a Promise to a JSON Object.\nexport function post(endpoint, params = {}) {\n  return fetch(endpoint, {\n    method: \"post\",\n    headers: { \"Content-type\": \"application/json\" },\n    body: JSON.stringify(params),\n  })\n    .then(convertToJSON) // convert result to JSON object\n    .catch((error) => {\n      // give a useful error message\n      throw `POST request to ${endpoint} failed with error:\\n${error}`;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}